// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: games.sql

package models

import (
	"context"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (
  game, year , dev,  publisher  , platform
) VALUES (
  ?, ? , ? , ? , ?
)
RETURNING id, game, year, dev, publisher, platform
`

type CreateGameParams struct {
	Game      string
	Year      interface{}
	Dev       string
	Publisher string
	Platform  string
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.Game,
		arg.Year,
		arg.Dev,
		arg.Publisher,
		arg.Platform,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Game,
		&i.Year,
		&i.Dev,
		&i.Publisher,
		&i.Platform,
	)
	return i, err
}

const getGame = `-- name: GetGame :one
SELECT id, game, year, dev, publisher, platform FROM games
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGame(ctx context.Context, id int64) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Game,
		&i.Year,
		&i.Dev,
		&i.Publisher,
		&i.Platform,
	)
	return i, err
}

const listGames = `-- name: ListGames :many
SELECT id, game, year, dev, publisher, platform FROM games
ORDER BY game
`

func (q *Queries) ListGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, listGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Game,
			&i.Year,
			&i.Dev,
			&i.Publisher,
			&i.Platform,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
